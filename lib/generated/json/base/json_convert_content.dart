// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:ftreader/model/book_entity.dart';
import 'package:ftreader/generated/json/book_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {						case BookData:
			return bookDataFromJson(data as BookData, json) as T;			case BookDataBook:
			return bookDataBookFromJson(data as BookDataBook, json) as T;			case BookDataCategory:
			return bookDataCategoryFromJson(data as BookDataCategory, json) as T;			case BookDataBookList:
			return bookDataBookListFromJson(data as BookDataBookList, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {					case BookData:
			return bookDataToJson(data as BookData);			case BookDataBook:
			return bookDataBookToJson(data as BookDataBook);			case BookDataCategory:
			return bookDataCategoryToJson(data as BookDataCategory);			case BookDataBookList:
			return bookDataBookListToJson(data as BookDataBookList);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'BookData':
			return BookData().fromJson(json);			case 'BookDataBook':
			return BookDataBook().fromJson(json);			case 'BookDataCategory':
			return BookDataCategory().fromJson(json);			case 'BookDataBookList':
			return BookDataBookList().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {				case 'BookData':
			return List<BookData>();			case 'BookDataBook':
			return List<BookDataBook>();			case 'BookDataCategory':
			return List<BookDataCategory>();			case 'BookDataBookList':
			return List<BookDataBookList>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}